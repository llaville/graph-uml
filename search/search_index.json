{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Generate UML diagrams by reflection for your PHP projects. Features The main features provided by this library are: build UML statements of a class diagram build image in one of the supported formats with local dot executable (when GraphVizGenerator is used) Currently, the following language features are supported: Property and method visibility Static properties and methods Method return types natively and from doc comment Parameter types from type hinting and doc comment Parameter default values Class constants with value Property types from doc comment Property default values Implemented interfaces and parent classes Abstract classes","title":"Home"},{"location":"#about","text":"Generate UML diagrams by reflection for your PHP projects.","title":"About"},{"location":"#features","text":"The main features provided by this library are: build UML statements of a class diagram build image in one of the supported formats with local dot executable (when GraphVizGenerator is used) Currently, the following language features are supported: Property and method visibility Static properties and methods Method return types natively and from doc comment Parameter types from type hinting and doc comment Parameter default values Class constants with value Property types from doc comment Property default values Implemented interfaces and parent classes Abstract classes","title":"Features"},{"location":"getting-started/","text":"Getting started Requirements PHP 7.1.3 or greater graphp/graph package from master branch (considered as future stable v1.0.0) graphp/graphviz package from master branch (considered as future stable v1.0.0) Generated with fork of clue/graph-composer . Learn more about this fork on PR request . Installation With Composer The recommended way to install this library is through composer . If you don't know yet what is composer, have a look on introduction . composer require bartlett/graph-uml With Git The Graph-UML can be directly used from GitHub by cloning the repository into a directory of your choice. git clone https://github.com/llaville/graph-uml.git Additionally, you'll have to install GraphViz ( dot executable). Users of Debian/Ubuntu-based distributions may simply invoke: sudo apt update sudo apt-get install graphviz -y while remaining users should install from GraphViz Download page.","title":"Getting-Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#requirements","text":"PHP 7.1.3 or greater graphp/graph package from master branch (considered as future stable v1.0.0) graphp/graphviz package from master branch (considered as future stable v1.0.0) Generated with fork of clue/graph-composer . Learn more about this fork on PR request .","title":"Requirements"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#with-composer","text":"The recommended way to install this library is through composer . If you don't know yet what is composer, have a look on introduction . composer require bartlett/graph-uml","title":"With Composer"},{"location":"getting-started/#with-git","text":"The Graph-UML can be directly used from GitHub by cloning the repository into a directory of your choice. git clone https://github.com/llaville/graph-uml.git Additionally, you'll have to install GraphViz ( dot executable). Users of Debian/Ubuntu-based distributions may simply invoke: sudo apt update sudo apt-get install graphviz -y while remaining users should install from GraphViz Download page.","title":"With Git"},{"location":"01_Features/Formatters/","text":"Formatters GraphViz allows two different formats to render vertex labels: HtmlFormatter that present vertex labels as HTML-like labels RecordFormatter that present vertex label as Record-based node","title":"Formatters"},{"location":"01_Features/Formatters/#formatters","text":"GraphViz allows two different formats to render vertex labels: HtmlFormatter that present vertex labels as HTML-like labels RecordFormatter that present vertex label as Record-based node","title":"Formatters"},{"location":"01_Features/Generators/","text":"Generators Graph-UML used at least two components : the mathematical graph/network GraPHP library to draw UML diagrams. any generator that implement the following contract. Graph-UML uses GraphVizGenerator as default, but allow others that may be registered later at runtime. Contract Each generator used to build graph statements should implement following interface: <?php namespace Bartlett\\GraphUml\\Generator ; use Bartlett\\GraphUml\\Formatter\\FormatterInterface ; use Graphp\\Graph\\Graph ; use ReflectionClass ; use ReflectionExtension ; interface GeneratorInterface { /** * @param array<string, mixed> $values */ public function setOptions ( array $values ) : void ; public function getFormatter () : FormatterInterface ; public function getName () : string ; public function getPrefix () : string ; public function getLabelClass ( ReflectionClass $reflection ) : string ; public function getLabelExtension ( ReflectionExtension $reflection ) : string ; public function setExecutable ( string $executable ) : void ; public function setFormat ( string $format ) : void ; public function createScript ( Graph $graph ) : string ; public function createImageFile ( Graph $graph , string $cmdFormat ) : string ; } setOptions() declares all options used to personalize generator's formatters. getFormatter() is in charge to retrieve instance of a formatter that will produce vertex labels. getName() identifies the generator with a unique name. getPrefix() prefixes all public attributes (graph, node, edge, cluster) only if necessary. getLabelClass() is in charge to make the label of the vertex corresponding to a class or interface element. getLabelExtension() is in charge to make the label of the vertex corresponding to an extension element. setExecutable() changes the executable to use. setFormat() defines the format of image to draw. createScript() is in charge to build graph statements depends on generator used. createImageFile() is in charge to draw image graph in format asked (see setFormat() ). Common functions An AbstractGenerator class allow to implement basic image creation behaviors.","title":"Generators"},{"location":"01_Features/Generators/#generators","text":"Graph-UML used at least two components : the mathematical graph/network GraPHP library to draw UML diagrams. any generator that implement the following contract. Graph-UML uses GraphVizGenerator as default, but allow others that may be registered later at runtime.","title":"Generators"},{"location":"01_Features/Generators/#contract","text":"Each generator used to build graph statements should implement following interface: <?php namespace Bartlett\\GraphUml\\Generator ; use Bartlett\\GraphUml\\Formatter\\FormatterInterface ; use Graphp\\Graph\\Graph ; use ReflectionClass ; use ReflectionExtension ; interface GeneratorInterface { /** * @param array<string, mixed> $values */ public function setOptions ( array $values ) : void ; public function getFormatter () : FormatterInterface ; public function getName () : string ; public function getPrefix () : string ; public function getLabelClass ( ReflectionClass $reflection ) : string ; public function getLabelExtension ( ReflectionExtension $reflection ) : string ; public function setExecutable ( string $executable ) : void ; public function setFormat ( string $format ) : void ; public function createScript ( Graph $graph ) : string ; public function createImageFile ( Graph $graph , string $cmdFormat ) : string ; } setOptions() declares all options used to personalize generator's formatters. getFormatter() is in charge to retrieve instance of a formatter that will produce vertex labels. getName() identifies the generator with a unique name. getPrefix() prefixes all public attributes (graph, node, edge, cluster) only if necessary. getLabelClass() is in charge to make the label of the vertex corresponding to a class or interface element. getLabelExtension() is in charge to make the label of the vertex corresponding to an extension element. setExecutable() changes the executable to use. setFormat() defines the format of image to draw. createScript() is in charge to build graph statements depends on generator used. createImageFile() is in charge to draw image graph in format asked (see setFormat() ).","title":"Contract"},{"location":"01_Features/Generators/#common-functions","text":"An AbstractGenerator class allow to implement basic image creation behaviors.","title":"Common functions"},{"location":"01_Features/Options/","text":"Options Option Value Default Description show_constants boolean true whether to show class constants as readonly static variables (or just omit them completely) show_properties boolean true whether to show class properties show_methods boolean true whether to show class or interface methods show_private boolean true whether to also show private methods/properties show_protected boolean true whether to also show protected methods/properties add_parents boolean true whether to show add parent classes or interfaces only_self boolean true whether to only show methods/properties that are actually defined in this class (and not those merely inherited from base) label_format string record whether to use html or record formatted labels (graphviz specific feature). Others generator may have different values indent_string string ' ' string to indent graph statement parts All default options are available in Bartlett\\GraphUml\\ClassDiagramBuilderInterface::OPTIONS_DEFAULTS class constant","title":"Options"},{"location":"01_Features/Options/#options","text":"Option Value Default Description show_constants boolean true whether to show class constants as readonly static variables (or just omit them completely) show_properties boolean true whether to show class properties show_methods boolean true whether to show class or interface methods show_private boolean true whether to also show private methods/properties show_protected boolean true whether to also show protected methods/properties add_parents boolean true whether to show add parent classes or interfaces only_self boolean true whether to only show methods/properties that are actually defined in this class (and not those merely inherited from base) label_format string record whether to use html or record formatted labels (graphviz specific feature). Others generator may have different values indent_string string ' ' string to indent graph statement parts All default options are available in Bartlett\\GraphUml\\ClassDiagramBuilderInterface::OPTIONS_DEFAULTS class constant","title":"Options"},{"location":"02_Cookbook/Multiple_Classes/","text":"Multiple classes diagram In this example, we specify only two classes, and these classes with theirs direct dependencies will be rendered in graph. <?php use Bartlett\\GraphUml ; use Graphp\\Graph\\Graph ; use Graphp\\GraphViz\\GraphViz ; $generator = new GraphUml\\Generator\\GraphVizGenerator ( new GraphViz ()); $graph = new Graph (); $builder = new GraphUml\\ClassDiagramBuilder ( $generator , $graph , [ 'label_format' => 'html' , ] ); $builder -> createVertexClass ( GraphUml\\Generator\\GraphVizGenerator :: class ); $builder -> createVertexClass ( GraphUml\\ClassDiagramBuilder :: class ); // For large graph, orientation is recommended // https://graphviz.gitlab.io/docs/attrs/rankdir/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.rankdir' , 'LR' ); // https://graphviz.gitlab.io/docs/attrs/bgcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.bgcolor' , 'transparent' ); // https://graphviz.gitlab.io/docs/attrs/fillcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.fillcolor' , '#FEFECE' ); // https://graphviz.gitlab.io/docs/attrs/style/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.style' , 'filled' ); $clusters = [ 'Bartlett\\\\GraphUml' , 'Bartlett\\\\GraphUml\\\\Generator' , ]; foreach ( $clusters as $cluster ) { $attribute = sprintf ( 'cluster.%s.graph.bgcolor' , $cluster ); $graph -> setAttribute ( $generator -> getPrefix () . $attribute , 'burlywood3' ); } // show UML diagram statements echo $generator -> createScript ( $graph ); // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); // generate binary image file $target = $generator -> createImageFile ( $graph ); echo ( empty ( $target ) ? 'no' : $target ) . ' file generated' . PHP_EOL ; Will output this graph statements . And image file generated look like :","title":"Multiple Classes"},{"location":"02_Cookbook/Multiple_Classes/#multiple-classes-diagram","text":"In this example, we specify only two classes, and these classes with theirs direct dependencies will be rendered in graph. <?php use Bartlett\\GraphUml ; use Graphp\\Graph\\Graph ; use Graphp\\GraphViz\\GraphViz ; $generator = new GraphUml\\Generator\\GraphVizGenerator ( new GraphViz ()); $graph = new Graph (); $builder = new GraphUml\\ClassDiagramBuilder ( $generator , $graph , [ 'label_format' => 'html' , ] ); $builder -> createVertexClass ( GraphUml\\Generator\\GraphVizGenerator :: class ); $builder -> createVertexClass ( GraphUml\\ClassDiagramBuilder :: class ); // For large graph, orientation is recommended // https://graphviz.gitlab.io/docs/attrs/rankdir/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.rankdir' , 'LR' ); // https://graphviz.gitlab.io/docs/attrs/bgcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.bgcolor' , 'transparent' ); // https://graphviz.gitlab.io/docs/attrs/fillcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.fillcolor' , '#FEFECE' ); // https://graphviz.gitlab.io/docs/attrs/style/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.style' , 'filled' ); $clusters = [ 'Bartlett\\\\GraphUml' , 'Bartlett\\\\GraphUml\\\\Generator' , ]; foreach ( $clusters as $cluster ) { $attribute = sprintf ( 'cluster.%s.graph.bgcolor' , $cluster ); $graph -> setAttribute ( $generator -> getPrefix () . $attribute , 'burlywood3' ); } // show UML diagram statements echo $generator -> createScript ( $graph ); // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); // generate binary image file $target = $generator -> createImageFile ( $graph ); echo ( empty ( $target ) ? 'no' : $target ) . ' file generated' . PHP_EOL ; Will output this graph statements . And image file generated look like :","title":"Multiple classes diagram"},{"location":"02_Cookbook/Php_Extensions/","text":"PHP Extensions diagram In this example, we specify only two extensions available, and these extensions will be rendered in graph. <?php use Bartlett\\GraphUml\\ClassDiagramBuilder ; use Bartlett\\GraphUml\\Generator\\GraphVizGenerator ; use Graphp\\Graph\\Graph ; use Graphp\\GraphViz\\GraphViz ; $generator = new GraphVizGenerator ( new GraphViz ()); $graph = new Graph (); $builder = new ClassDiagramBuilder ( $generator , $graph , [ 'label_format' => 'html' , ] ); $extensions = get_loaded_extensions ( false ); // adding all extensions will result in a huge graph, so just pick 2 random ones shuffle ( $extensions ); $extensions = array_slice ( $extensions , 0 , 2 ); foreach ( $extensions as $extension ) { $builder -> createVertexExtension ( $extension ); } // For large graph, orientation is recommended // https://graphviz.gitlab.io/docs/attrs/rankdir/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.rankdir' , 'LR' ); // https://graphviz.gitlab.io/docs/attrs/bgcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.bgcolor' , 'transparent' ); // https://graphviz.gitlab.io/docs/attrs/fillcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.fillcolor' , '#FEFECE' ); // https://graphviz.gitlab.io/docs/attrs/style/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.style' , 'filled' ); // show UML diagram statements echo $generator -> createScript ( $graph ); // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); // generate binary image file $target = $generator -> createImageFile ( $graph ); echo ( empty ( $target ) ? 'no' : $target ) . ' file generated' . PHP_EOL ; Will output this graph statements . And image file generated look like :","title":"Extension diagram"},{"location":"02_Cookbook/Php_Extensions/#php-extensions-diagram","text":"In this example, we specify only two extensions available, and these extensions will be rendered in graph. <?php use Bartlett\\GraphUml\\ClassDiagramBuilder ; use Bartlett\\GraphUml\\Generator\\GraphVizGenerator ; use Graphp\\Graph\\Graph ; use Graphp\\GraphViz\\GraphViz ; $generator = new GraphVizGenerator ( new GraphViz ()); $graph = new Graph (); $builder = new ClassDiagramBuilder ( $generator , $graph , [ 'label_format' => 'html' , ] ); $extensions = get_loaded_extensions ( false ); // adding all extensions will result in a huge graph, so just pick 2 random ones shuffle ( $extensions ); $extensions = array_slice ( $extensions , 0 , 2 ); foreach ( $extensions as $extension ) { $builder -> createVertexExtension ( $extension ); } // For large graph, orientation is recommended // https://graphviz.gitlab.io/docs/attrs/rankdir/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.rankdir' , 'LR' ); // https://graphviz.gitlab.io/docs/attrs/bgcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.bgcolor' , 'transparent' ); // https://graphviz.gitlab.io/docs/attrs/fillcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.fillcolor' , '#FEFECE' ); // https://graphviz.gitlab.io/docs/attrs/style/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.style' , 'filled' ); // show UML diagram statements echo $generator -> createScript ( $graph ); // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); // generate binary image file $target = $generator -> createImageFile ( $graph ); echo ( empty ( $target ) ? 'no' : $target ) . ' file generated' . PHP_EOL ; Will output this graph statements . And image file generated look like :","title":"PHP Extensions diagram"},{"location":"02_Cookbook/Single_Class/","text":"Single class diagram In this example, we specify only one class, and this class with its direct dependencies will be rendered in graph. <?php use Bartlett\\GraphUml\\ClassDiagramBuilder ; use Bartlett\\GraphUml\\Generator\\GraphVizGenerator ; use Graphp\\Graph\\Graph ; use Graphp\\GraphViz\\GraphViz ; $generator = new GraphVizGenerator ( new GraphViz ()); $graph = new Graph (); $builder = new ClassDiagramBuilder ( $generator , $graph , [ 'label_format' => 'html' , ] ); $builder -> createVertexClass ( ClassDiagramBuilder :: class ); // For large graph, orientation is recommended // https://graphviz.gitlab.io/docs/attrs/rankdir/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.rankdir' , 'LR' ); // https://graphviz.gitlab.io/docs/attrs/bgcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.bgcolor' , 'transparent' ); // https://graphviz.gitlab.io/docs/attrs/fillcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.fillcolor' , '#FEFECE' ); // https://graphviz.gitlab.io/docs/attrs/style/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.style' , 'filled' ); $clusters = [ 'Bartlett\\\\GraphUml' , ]; foreach ( $clusters as $cluster ) { $attribute = sprintf ( 'cluster.%s.graph.bgcolor' , $cluster ); $graph -> setAttribute ( $generator -> getPrefix () . $attribute , 'burlywood3' ); } // show UML diagram statements echo $generator -> createScript ( $graph ); // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); // generate binary image file $target = $generator -> createImageFile ( $graph ); echo ( empty ( $target ) ? 'no' : $target ) . ' file generated' . PHP_EOL ; NOTE : Without custom $options provided with ClassDiagramBuilder class constructor, all default values are used (see ClassDiagramBuilderInterface::OPTIONS_DEFAULTS ) Will output this graph statements . And image file generated look like :","title":"Single Class"},{"location":"02_Cookbook/Single_Class/#single-class-diagram","text":"In this example, we specify only one class, and this class with its direct dependencies will be rendered in graph. <?php use Bartlett\\GraphUml\\ClassDiagramBuilder ; use Bartlett\\GraphUml\\Generator\\GraphVizGenerator ; use Graphp\\Graph\\Graph ; use Graphp\\GraphViz\\GraphViz ; $generator = new GraphVizGenerator ( new GraphViz ()); $graph = new Graph (); $builder = new ClassDiagramBuilder ( $generator , $graph , [ 'label_format' => 'html' , ] ); $builder -> createVertexClass ( ClassDiagramBuilder :: class ); // For large graph, orientation is recommended // https://graphviz.gitlab.io/docs/attrs/rankdir/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.rankdir' , 'LR' ); // https://graphviz.gitlab.io/docs/attrs/bgcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'graph.bgcolor' , 'transparent' ); // https://graphviz.gitlab.io/docs/attrs/fillcolor/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.fillcolor' , '#FEFECE' ); // https://graphviz.gitlab.io/docs/attrs/style/ $graph -> setAttribute ( $generator -> getPrefix () . 'node.style' , 'filled' ); $clusters = [ 'Bartlett\\\\GraphUml' , ]; foreach ( $clusters as $cluster ) { $attribute = sprintf ( 'cluster.%s.graph.bgcolor' , $cluster ); $graph -> setAttribute ( $generator -> getPrefix () . $attribute , 'burlywood3' ); } // show UML diagram statements echo $generator -> createScript ( $graph ); // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); // generate binary image file $target = $generator -> createImageFile ( $graph ); echo ( empty ( $target ) ? 'no' : $target ) . ' file generated' . PHP_EOL ; NOTE : Without custom $options provided with ClassDiagramBuilder class constructor, all default values are used (see ClassDiagramBuilderInterface::OPTIONS_DEFAULTS ) Will output this graph statements . And image file generated look like :","title":"Single class diagram"},{"location":"02_Cookbook/Without_Elements/","text":"Classes without elements In this example, we specify only one class, and this class with its direct dependencies will be rendered in graph, without constants, properties and methods. <?php use Bartlett\\GraphUml\\ClassDiagramBuilder ; use Bartlett\\GraphUml\\Generator\\GraphVizGenerator ; use Graphp\\Graph\\Graph ; use Graphp\\GraphViz\\GraphViz ; $generator = new GraphVizGenerator ( new GraphViz ()); $graph = new Graph (); $builder = new ClassDiagramBuilder ( $generator , $graph , [ 'label_format' => 'record' , 'show_constants' => false , 'show_properties' => false , 'show_methods' => false , ] ); $builder -> createVertexClass ( ClassDiagramBuilder :: class ); // show UML diagram statements echo $generator -> createScript ( $graph ); // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); // generate binary image file $target = $generator -> createImageFile ( $graph ); echo ( empty ( $target ) ? 'no' : $target ) . ' file generated' . PHP_EOL ; Will output this graph statements . And image file generated look like :","title":"Without Elements"},{"location":"02_Cookbook/Without_Elements/#classes-without-elements","text":"In this example, we specify only one class, and this class with its direct dependencies will be rendered in graph, without constants, properties and methods. <?php use Bartlett\\GraphUml\\ClassDiagramBuilder ; use Bartlett\\GraphUml\\Generator\\GraphVizGenerator ; use Graphp\\Graph\\Graph ; use Graphp\\GraphViz\\GraphViz ; $generator = new GraphVizGenerator ( new GraphViz ()); $graph = new Graph (); $builder = new ClassDiagramBuilder ( $generator , $graph , [ 'label_format' => 'record' , 'show_constants' => false , 'show_properties' => false , 'show_methods' => false , ] ); $builder -> createVertexClass ( ClassDiagramBuilder :: class ); // show UML diagram statements echo $generator -> createScript ( $graph ); // default format is PNG, change it to SVG $generator -> setFormat ( 'svg' ); // generate binary image file $target = $generator -> createImageFile ( $graph ); echo ( empty ( $target ) ? 'no' : $target ) . ' file generated' . PHP_EOL ; Will output this graph statements . And image file generated look like :","title":"Classes without elements"}]}