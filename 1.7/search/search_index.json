{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<p>Generate UML diagrams by reflection for your PHP projects.</p> <p></p>"},{"location":"#features","title":"Features","text":"<p>The main features provided by this library are:</p> <ul> <li>build UML statements of a class diagram</li> <li>build image in one of the supported formats with local <code>dot</code> executable (when GraphVizGenerator is used)</li> </ul> <p>Currently, the following language features are supported:</p> <ul> <li>Property and method visibility</li> <li>Static properties and methods</li> <li>Method return types natively and from doc comment</li> <li>Parameter types from type hinting and doc comment</li> <li>Parameter default values</li> <li>Class constants with value</li> <li>Property types from doc comment</li> <li>Property default values</li> <li>Implemented interfaces and parent classes</li> <li>Abstract classes</li> </ul>"},{"location":"getting-started/","title":"Getting-Started","text":""},{"location":"getting-started/#getting-started","title":"Getting started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>PHP 8.2 or greater</li> <li>graphp/graph package from master branch (considered as future stable v1.0.0)</li> <li>graphp/graphviz package from master branch (considered as future stable v1.0.0)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#with-composer","title":"With Composer","text":"<p>The recommended way to install this library is through composer. If you don't know yet what is composer, have a look on introduction.</p> <pre><code>composer require bartlett/graph-uml ^1.7\n</code></pre>"},{"location":"getting-started/#with-git","title":"With Git","text":"<p>The Graph-UML can be directly used from GitHub by cloning the repository into a directory of your choice.</p> <pre><code>git clone -b 1.7 https://github.com/llaville/graph-uml.git\n</code></pre> <p>Additionally, you'll have to install GraphViz (<code>dot</code> executable). Users of Debian/Ubuntu-based distributions may simply invoke:</p> <pre><code>sudo apt update\nsudo apt-get install graphviz -y\n</code></pre> <p>while remaining users should install from GraphViz Download page.</p>"},{"location":"01_Features/Formatters/","title":"Formatters","text":""},{"location":"01_Features/Formatters/#formatters","title":"Formatters","text":"<p>GraphViz allows two different formats to render vertex labels:</p> <ul> <li>HtmlFormatter that present vertex labels as HTML-like labels</li> <li>RecordFormatter that present vertex label as Record-based node</li> </ul>"},{"location":"01_Features/Generators/","title":"Generators","text":""},{"location":"01_Features/Generators/#generators","title":"Generators","text":"<p>Graph-UML used at least two components :</p> <ul> <li>the mathematical graph/network GraPHP library to draw UML diagrams.</li> <li>any generator that implement the following contract. Graph-UML uses GraphVizGenerator as default, but allow others that may be registered later at runtime.</li> </ul>"},{"location":"01_Features/Generators/#contract","title":"Contract","text":"<p>Each generator used to build graph statements should implement following interface:</p> <pre><code>&lt;?php\nnamespace Bartlett\\GraphUml\\Generator;\n\nuse Bartlett\\GraphUml\\Formatter\\FormatterInterface;\n\nuse Graphp\\Graph\\Graph;\n\nuse ReflectionClass;\nuse ReflectionExtension;\n\ninterface GeneratorInterface\n{\n    /**\n     * @param array&lt;string, mixed&gt; $values\n     */\n    public function setOptions(array $values): void;\n\n    public function getFormatter(): FormatterInterface;\n\n    public function getName(): string;\n\n    public function getPrefix(): string;\n\n    public function getLabelClass(ReflectionClass $reflection): string;\n\n    public function getLabelExtension(ReflectionExtension $reflection): string;\n\n    public function createScript(Graph $graph): string;\n\n    public function createImageFile(Graph $graph, string $cmdFormat): string;\n}\n</code></pre> <ul> <li> <p><code>setOptions()</code> declares all options used to personalize generator's formatters.</p> </li> <li> <p><code>getFormatter()</code> is in charge to retrieve instance of a formatter that will produce vertex labels.</p> </li> <li> <p><code>getName()</code> identifies the generator with a unique name.</p> </li> <li> <p><code>getPrefix()</code> prefixes all public attributes (graph, node, edge, cluster) only if necessary.</p> </li> <li> <p><code>getLabelClass()</code> is in charge to make the label of the vertex corresponding to a class or interface element.</p> </li> <li> <p><code>getLabelExtension()</code> is in charge to make the label of the vertex corresponding to an extension element.</p> </li> <li> <p><code>createScript()</code> is in charge to build graph statements depends on generator used.</p> </li> <li> <p><code>createImageFile()</code> is in charge to draw image graph in format asked (see <code>setFormat()</code>).</p> </li> </ul>"},{"location":"01_Features/Generators/#common-functions","title":"Common functions","text":"<p>An AbstractGenerator class allow to implement basic image creation behaviors.</p>"},{"location":"01_Features/Options/","title":"Options","text":""},{"location":"01_Features/Options/#options","title":"Options","text":"Option Value Default Description show_constants boolean true whether to show class constants as readonly static variables (or just omit them completely) show_properties boolean true whether to show class properties show_methods boolean true whether to show class or interface methods show_private boolean true whether to also show private methods/properties show_protected boolean true whether to also show protected methods/properties add_parents boolean true whether to show add parent classes or interfaces only_self boolean true whether to only show methods/properties that are actually defined in this class (and not those merely inherited from base) label_format string html whether to use html or record formatted labels (graphviz specific feature). Others generator may have different values indent_string string '  ' string to indent graph statement parts <p>All default options are available in <code>Bartlett\\GraphUml\\ClassDiagramBuilderInterface::OPTIONS_DEFAULTS</code> class constant</p>"},{"location":"02_Cookbook/Multiple_Classes/","title":"Multiple Classes","text":""},{"location":"02_Cookbook/Multiple_Classes/#multiple-classes-diagram","title":"Multiple classes diagram","text":"<p>In this example, we specify only two classes, and these classes with theirs direct dependencies will be rendered in graph.</p> <pre><code>&lt;?php\nuse Bartlett\\GraphUml\\ClassDiagramBuilder;\nuse Bartlett\\GraphUml\\Generator\\GraphVizGenerator;\n\nuse Graphp\\Graph\\Graph;\nuse Graphp\\GraphViz\\GraphViz;\n\n$options = [\n    'label_format' =&gt; 'html',\n    // @link https://graphviz.gitlab.io/docs/attrs/rankdir/\n    'graph.rankdir' =&gt; 'LR',\n    // @linkg https://graphviz.gitlab.io/docs/attrs/bgcolor/\n    'graph.bgcolor' =&gt; 'transparent',\n    // @link https://graphviz.gitlab.io/docs/attrs/fillcolor/\n    'node.fillcolor' =&gt; '#FECECE',\n    // @link https://graphviz.gitlab.io/docs/attrs/style/\n    'node.style' =&gt; 'filled',\n    // @link https://graphviz.gitlab.io/docs/attr-types/colorList/\n    'cluster.Bartlett\\\\GraphUml.graph.bgcolor' =&gt; 'burlywood3',\n    'cluster.Bartlett\\\\GraphUml\\\\Generator.graph.bgcolor' =&gt; 'burlywood3',\n];\n\n$datasource = [\n    GraphVizGenerator::class,\n    ClassDiagramBuilder::class,\n];\n\n$generator = new GraphVizGenerator(new GraphViz());\n$graph = new Graph();\n$builder = new ClassDiagramBuilder($generator, $graph, $options ?? []);\n\nforeach ($datasource as $class) {\n    $builder-&gt;createVertexClass($class, $options);\n}\n\n// show UML diagram statements\necho $generator-&gt;createScript($graph);\n\n// default format is PNG, change it to SVG\n$generator-&gt;setFormat('svg');\n\n// generate binary image file\n$target = $generator-&gt;createImageFile($graph);\necho (empty($target) ? 'no' : $target) . ' file generated' . PHP_EOL;\n</code></pre> <p>Will output this graph statements.</p> <p>And image file generated look like :</p> <p></p>"},{"location":"02_Cookbook/Php_Extensions/","title":"Extension diagram","text":""},{"location":"02_Cookbook/Php_Extensions/#php-extensions-diagram","title":"PHP Extensions diagram","text":"<p>In this example, we specify only two extensions available, and these extensions will be rendered in graph.</p> <pre><code>&lt;?php\nuse Bartlett\\GraphUml\\ClassDiagramBuilder;\nuse Bartlett\\GraphUml\\Generator\\GraphVizGenerator;\n\nuse Graphp\\Graph\\Graph;\nuse Graphp\\GraphViz\\GraphViz;\n\n$options = [\n    'label_format' =&gt; 'html',\n    // @link https://graphviz.gitlab.io/docs/attrs/rankdir/\n    'graph.rankdir' =&gt; 'LR',\n    // @linkg https://graphviz.gitlab.io/docs/attrs/bgcolor/\n    'graph.bgcolor' =&gt; 'transparent',\n    // @link https://graphviz.gitlab.io/docs/attrs/fillcolor/\n    'node.fillcolor' =&gt; '#FEFECE',\n];\n\n$datasource = [\n    'lzf',\n    'yaml',\n];\n\n$generator = new GraphVizGenerator(new GraphViz());\n$graph = new Graph();\n$builder = new ClassDiagramBuilder($generator, $graph, $options);\n\nforeach ($datasource as $i =&gt; $extension) {\n    $attributes = ($i === 0) ? ['fillcolor' =&gt; 'burlywood3'] : [];\n    $builder-&gt;createVertexExtension($extension, $attributes);\n}\n\n// show UML diagram statements\necho $generator-&gt;createScript($graph);\n\n// default format is PNG, change it to SVG\n$generator-&gt;setFormat('svg');\n\n// generate binary image file\n$target = $generator-&gt;createImageFile($graph);\necho (empty($target) ? 'no' : $target) . ' file generated' . PHP_EOL;\n</code></pre> <p>Will output this graph statements.</p> <p>And image file generated look like :</p> <p></p>"},{"location":"02_Cookbook/Single_Class/","title":"Single Class","text":""},{"location":"02_Cookbook/Single_Class/#single-class-diagram","title":"Single class diagram","text":"<p>In this example, we specify only one class, and this class with its direct dependencies will be rendered in graph.</p> <pre><code>&lt;?php\nuse Bartlett\\GraphUml\\ClassDiagramBuilder;\nuse Bartlett\\GraphUml\\Generator\\GraphVizGenerator;\n\nuse Graphp\\Graph\\Graph;\nuse Graphp\\GraphViz\\GraphViz;\n\n$options = [\n    'label_format' =&gt; 'html',\n    // @link https://graphviz.gitlab.io/docs/attrs/rankdir/\n    'graph.rankdir' =&gt; 'LR',\n    // @linkg https://graphviz.gitlab.io/docs/attrs/bgcolor/\n    'graph.bgcolor' =&gt; 'transparent',\n    // @link https://graphviz.gitlab.io/docs/attrs/fillcolor/\n    'node.fillcolor' =&gt; '#FECECE',\n    // @link https://graphviz.gitlab.io/docs/attrs/style/\n    'node.style' =&gt; 'filled',\n    // @link https://graphviz.gitlab.io/docs/attr-types/colorList/\n    'cluster.Bartlett\\\\GraphUml.graph.bgcolor' =&gt; 'burlywood3',\n];\n\n$builder-&gt;createVertexClass(ClassDiagramBuilder::class);\n\n// show UML diagram statements\necho $generator-&gt;createScript($graph);\n\n// default format is PNG, change it to SVG\n$generator-&gt;setFormat('svg');\n\n// generate binary image file\n$target = $generator-&gt;createImageFile($graph);\necho (empty($target) ? 'no' : $target) . ' file generated' . PHP_EOL;\n</code></pre> <p>NOTE: Without custom <code>$options</code> provided with <code>ClassDiagramBuilder</code> class constructor, all default values are used (see <code>ClassDiagramBuilderInterface::OPTIONS_DEFAULTS</code>)</p> <p>Will output this graph statements.</p> <p>And image file generated look like :</p> <p></p>"},{"location":"02_Cookbook/Without_Elements/","title":"Without Elements","text":""},{"location":"02_Cookbook/Without_Elements/#classes-without-elements","title":"Classes without elements","text":"<p>In this example, we specify only one class, and this class with its direct dependencies will be rendered in graph, without constants, properties and methods.</p> <pre><code>&lt;?php\nuse Bartlett\\GraphUml\\ClassDiagramBuilder;\nuse Bartlett\\GraphUml\\Generator\\GraphVizGenerator;\n\nuse Graphp\\Graph\\Graph;\nuse Graphp\\GraphViz\\GraphViz;\n\n$options = [\n    'label_format' =&gt; 'record',\n    'show_constants' =&gt; false,\n    'show_properties' =&gt; false,\n    'show_methods' =&gt; false,\n];\n\n$generator = new GraphVizGenerator(new GraphViz(), 'dot', $format);\n$graph = new Graph();\n$builder = new ClassDiagramBuilder($generator, $graph, $options ?? []);\n\n$builder-&gt;createVertexClass(ClassDiagramBuilder::class);\n\n// show UML diagram statements\necho $generator-&gt;createScript($graph);\n\n// default format is PNG, change it to SVG\n$generator-&gt;setFormat('svg');\n\n// generate binary image file\n$target = $generator-&gt;createImageFile($graph);\necho (empty($target) ? 'no' : $target) . ' file generated' . PHP_EOL;\n</code></pre> <p>Will output this graph statements.</p> <p>And image file generated look like :</p> <p></p>"}]}